
Sweep2d:
  Eval:
    vs_torch:
      n_tests: 100  # number of iterations per test
      precision: 5  # numpy.testing.assert_almost_equal 'decimal' argument
      input_arg_limits:  # numpy.random.randint 'low', 'high' - 1 arguments for each dimension of each sweep2d input parameter
        unpadded:
          num: [1, 10]
          depth: [1, 3]
          height: [100, 500]
          width: [100, 500]

        window:
          num: [1, 10]
          depth: [1, 3]  # always equal to unpadded depth regardless of value here
          height: [1, 5]  # must be <= unpadded height
          width: [1, 5]  # must be <= unpadded width

        padding:  # minimum must be >= 0
          height: [0, 5]
          width: [0, 5]

        stride:  # minimum must be >= 1
          height: [1, 3]
          width: [1, 3]

    vs_scipy:
      n_tests: 100
      precision: 5  # numpy.testing.assert_almost_equal 'decimal' argument
      input_arg_limits:  # numpy.random.randint 'low', 'high' - 1 arguments for each dimension of each sweep2d input parameter
        unpadded:
          num: [1, 10]
          depth: [1, 3]
          height: [100, 500]
          width: [100, 500]

        window:
          num: [1, 10]
          depth: [1, 3]  # always equal to unpadded depth regardless of value here
          height: [1, 5]  # must be <= unpadded height
          width: [1, 5]  # must be <= unpadded width

        padding:  # minimum must be >= 0
          height: [0, 5]
          width: [0, 5]

        stride:  # minimum must be >= 1
          height: [1, 3]
          width: [1, 3]

  Time:
    test1:
      n_tests: 20000
      input_arg_shapes:
        unpadded: [1, 1, 100, 100]
        window: [1, 1, 3, 3]
        padding: [0, 0]
        stride: [1, 1]

    test2:
      n_tests: 1000
      input_arg_shapes:
        unpadded: [1, 1, 500, 500]
        window: [1, 1, 3, 3]
        padding: [0, 0]
        stride: [1, 1]

    test3:
      n_tests: 200
      input_arg_shapes:
        unpadded: [5, 1, 500, 500]
        window: [5, 1, 3, 3]
        padding: [0, 0]
        stride: [1, 1]

    test4:
      n_tests: 100
      input_arg_shapes:
        unpadded: [5, 3, 500, 500]
        window: [5, 3, 3, 3]
        padding: [0, 0]
        stride: [1, 1]

    test5:
      n_tests: 100
      input_arg_shapes:
        unpadded: [5, 1, 500, 500]
        window: [20, 1, 3, 3]
        padding: [0, 0]
        stride: [1, 1]

  Unit:
    modes: ['user', 'full', 'same']
    tests:
      # edge cases: values exist in only a single dimension
      test1:  # scalar
        unpadded: [1, 1, 1, 1]
        window: [1, 1, 1, 1]
        padding: [2, 3]
        stride: [2, 3]

      test2:  # width only
        unpadded: [1, 1, 1, 10]
        window: [1, 1, 1, 5]
        padding: [2, 3]
        stride: [2, 3]

      test3:  # height only
        unpadded: [1, 1, 10, 1]
        window: [1, 1, 5, 1]
        padding: [2, 3]
        stride: [2, 3]

      test4:  # depth only
        unpadded: [1, 10, 1, 1]
        window: [1, 10, 1, 1]
        padding: [2, 3]
        stride: [2, 3]

      test5:  # num only
        unpadded: [10, 1, 1, 1]
        window: [5, 1, 1, 1]
        padding: [2, 3]
        stride: [2, 3]

      # normal cases: all parity combinations of unpadded and window heights and widths
      test6:  # even/even
        unpadded: [10, 5, 10, 10]
        window: [10, 5, 4, 4]
        padding: [2, 3]
        stride: [2, 3]

      test7:  # even/odd
        unpadded: [10, 5, 10, 10]
        window: [10, 5, 5, 5]
        padding: [2, 3]
        stride: [2, 3]

      test8:  # odd/even
        unpadded: [10, 5, 11, 11]
        window: [10, 5, 6, 6]
        padding: [2, 3]
        stride: [2, 3]

      test9:  # odd/odd
        unpadded: [10, 5, 11, 11]
        window: [10, 5, 5, 5]
        padding: [2, 3]
        stride: [2, 3]

